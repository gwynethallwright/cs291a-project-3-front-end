{"version":3,"sources":["Stream.jsx","LoginRequest.jsx","Login.jsx","PostRequest.jsx","Compose.jsx","MessageList.jsx","UserList.jsx","App.js","serviceWorker.js","index.js"],"names":["Stream","props","state","userList","stream","EventSource","this","token","addEventListener","event","console","log","close","updateToken","updateMessageList","JSON","parse","data","status","push","user","updateUserList","userToRemove","filter","message","updateNumMessages","users","React","Component","LoginRequest","request","XMLHttpRequest","form","FormData","append","password","username","open","onreadystatechange","readyState","accessToken","responseText","startStream","alert","send","Login","onSubmit","preventDefault","sendRequest","onChange","setState","target","name","value","type","PostRequest","setRequestHeader","Compose","MessageList","class","messageList","map","item","key","UserList","App","prevState","numMessages","node","newUserSet","Set","newUserList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5838913a.chunk.js","sourcesContent":["import React from 'react';\n\nclass Stream extends React.Component {\n  \tconstructor(props) {\n    \tsuper(props);\n    \tthis.state = {userList: []};\n    }\n\n    startStream() {\n\t    var stream = new EventSource(\"http://chat.cs291.com/stream/\" + this.props.token);\n        // var stream = new EventSource(\"http://localhost:4000/stream/\" + this.props.token);\n\t    \n\t    stream.addEventListener(\n\t    \t\"Disconnect\", \n\t    \t(event) => {\n                console.log(this.props.token);\n\t    \t\tstream.close();\n\t            this.props.updateToken(\"\");\n\t        \t},\n\t        false\n\t    );\n\n\t    stream.addEventListener(\n        \t\"ServerStatus\",\n        \t(event) => {\n            \tthis.props.updateMessageList([JSON.parse(event.data).status]);\n        \t},\n        \tfalse\n    \t);\n\n    \tstream.addEventListener(\n    \t\t\"Join\",\n    \t\t(event) => {\n                this.state.userList.push(JSON.parse(event.data).user);\n                this.props.updateUserList(this.state.userList);\n                this.props.updateMessageList([\"JOINED: \" + JSON.parse(event.data).user]);\n        \t},\n        \tfalse\n    \t);\n\n    \tstream.addEventListener(\n        \t\"Part\",\n        \t(event) => {\n                let userToRemove = JSON.parse(event.data).user;\n            \tthis.state.userList = this.state.userList.filter(function(user) {return user !== userToRemove});\n                this.props.updateUserList(this.state.userList);\n                this.props.updateMessageList([\"PARTED: \" + JSON.parse(event.data).user]);\n        \t},\n        \tfalse\n    \t);\n\n    \tstream.addEventListener(\n        \t\"Message\",\n        \t(event) => {\n                this.props.updateMessageList([JSON.parse(event.data).user + \": \" + JSON.parse(event.data).message]);\n                this.props.updateNumMessages();\n            },\n        \tfalse\n    \t);\n\n    \tstream.addEventListener(\n        \t\"Users\",\n        \t(event) => {\n                this.state.userList = JSON.parse(event.data).users;\n                this.props.updateUserList(this.state.userList);\n        \t},\n        \tfalse\n    \t);\n\n    } // End of startStream function\n\n}\nexport default Stream;","import React from 'react';\nimport Stream from './Stream.jsx';\n\nclass LoginRequest extends React.Component {\n  \tconstructor(props) {\n    \tsuper(props);\n    \tthis.state = {};\n    }\n\n    sendRequest() {\n    \tvar request = new XMLHttpRequest();\n\t    var form = new FormData();\n\t    form.append(\"password\", this.props.password);\n\t    form.append(\"username\", this.props.username);\n\t    request.open(\"POST\", \"http://chat.cs291.com/login\");\n\t    // request.open(\"POST\", \"http://localhost:4000/login\");\n\t    request.onreadystatechange = () => {\n\t     \tconsole.log(request);\n\t    \tif (request.readyState !== 4) return;\n\t    \tif (request.status === 201){\n\t    \t\t// Extract the token\n\t    \t\tvar accessToken = JSON.parse(request.responseText).token;\n\t    \t\tthis.props.updateToken(accessToken);\n\t    \t\tvar stream = new Stream({\"token\": accessToken, updateToken: this.props.updateToken, updateMessageList: this.props.updateMessageList, updateUserList: this.props.updateUserList, updateNumMessages: this.props.updateNumMessages});\n\t    \t\tstream.startStream();\n\t    \t}\n\t    \telse if (request.status === 403){\n\t    \t\talert(\"Invalid username or password\");\n\t    \t}\n\t    \telse {\n\t    \t\talert(request.status + \" failure to /login\");\n\t    \t}\n\t    };\n\t    request.send(form);\n\t  };\n}\nexport default LoginRequest;","import React from 'react';\nimport LoginRequest from './LoginRequest.jsx';\nimport './Login.css'\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\"\n      };\n    }\n\n    onSubmit = event => {\n    \tevent.preventDefault();\n    \tvar loginRequest = new LoginRequest({\"username\": this.state.username, \"password\": this.state.password, \"updateToken\": this.props.updateToken, \"updateMessageList\": this.props.updateMessageList, \"updateUserList\": this.props.updateUserList, \"updateNumMessages\": this.props.updateNumMessages});\n    \tloginRequest.sendRequest();\n    };\n\n    onChange = event => {\n\t\tthis.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n\t\treturn (\n\t\t    <>\n\t\t    <form onSubmit={this.onSubmit}>\n\t\t    <label> Username:\n\t\t    <br></br>\n\t\t    <input name=\"username\" type=\"text\" value={this.state.username} onChange={this.onChange}/>\n\t\t    </label>\n\t\t    <br></br>\n\t\t    <label> Password:\n\t\t    <br></br>\n\t\t    <input name=\"password\" type=\"password\" value={this.state.password} onChange={this.onChange}/>\n\t\t    </label>\n\t\t    <br></br>\n\t        <input type=\"submit\" value=\"Login\" />\n\t        </form> \n\t        </> );\n\t    };\n\t};\nexport default Login;","import React from 'react';\n\nclass PostRequest extends React.Component {\n  \tconstructor(props) {\n    \tsuper(props);\n    \tthis.state = {};\n    }\n\n    sendRequest() {\n    \tvar form = new FormData();\n    \tform.append(\"message\", this.props.message);\n\t    var request = new XMLHttpRequest();\n\t    request.open(\"POST\", \"http://chat.cs291.com/message\");\n        // request.open(\"POST\", \"http://localhost:4000/message\");\n\t    request.setRequestHeader(\"Authorization\", \"Bearer \" + this.props.token);\n\t    request.send(form);\n\t}\n\n}\nexport default PostRequest;","import React from 'react';\nimport PostRequest from './PostRequest.jsx';\nimport './Compose.css'\n\nclass Compose extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\",\n      };\n    }\n\n    onSubmit = event => {\n\t    event.preventDefault();\n\t    var postRequest = new PostRequest({\"message\": this.state.message, \"token\": this.props.token});\n\t    postRequest.sendRequest();\n    \tthis.setState({message: \"\"});\n     };\n\n    onChange = event => {\n    \tthis.setState({ [event.target.name]: event.target.value });\n  \t};\n\n    render() {\n\treturn (\n\t    <>\n\t    <form onSubmit={this.onSubmit}>\n\t    <input name=\"message\" type=\"text\" value={this.state.message} onChange={this.onChange}/>\n    \t</form> \n    \t</>\n    \t);\n\t}\n\n}\nexport default Compose;","import React, {createRef} from 'react';\nimport './MessageList.css';\n\nclass MessageList extends React.Component {\n  \tconstructor(props) {\n    \tsuper(props);\n    \tthis.state = {};\n    }\n\n    render() {return(\n    <>\n    <div class=\"MessageListItem\">\n    {this.props.messageList.map((item, key) => (\n    <p> {item} </p>))}\n    </div>\n    </>\n    )\n    }\n\n}\nexport default MessageList;","import React from 'react';\nimport './UserList.css'\n\nclass UserList extends React.Component {\n  \tconstructor(props) {\n    \tsuper(props);\n    \tthis.state = {};\n    }\n\n    render() {return(\n    <>\n    <div class=\"UserListItem\">\n    Users Logged On:\n    {this.props.userList.map((item, key) => (\n    <p> {item} </p>))}\n    </div>\n    </>\n    )\n    }\n\n}\nexport default UserList;","import React from 'react';\nimport './App.css';\nimport Login from './Login';\nimport Compose from './Compose';\nimport MessageList from './MessageList.jsx';\nimport UserList from './UserList.jsx';\nimport Stream from './Stream.jsx';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {token: \"\", messageList: [], userList: [], numMessages: 0};\n    }\n\n  updateToken = (token) => {\n  \tthis.setState((prevState, props) => ({\n      token: token\n    }));\n  };\n\n  updateMessageList = (message) => {\n  \tthis.setState((prevState, props) => ({\n      messageList: [...prevState.messageList, message]\n    }));\n  };\n\n  updateUserList = (userList) => {\n  \tthis.setState((prevState, props) => ({\n      userList: userList\n    }));\n  };\n\n  updateNumMessages = () => {   \t\n  \tthis.setState((prevState, props) => ({\n      numMessages: this.state.numMessages+1\n    }));\n  };\n\n  render(){\n  \tlet node;\n  \tif (this.state.token !== \"\"){\n  \t\tvar newUserSet = new Set(this.state.userList);\n  \t\tvar newUserList = [...newUserSet];\n  \t\tnode = (\n  \t\t\t<>\n  \t\t\t<div class=\"NumMessages\">\n  \t\t\tNumber of Messages: {this.state.numMessages}</div>\n  \t\t\t<div class=\"TopDisplay\">\n  \t\t\t<MessageList messageList={this.state.messageList}/>\n  \t\t\t<UserList userList={newUserList}/>\n  \t\t\t</div>\n  \t\t\t<Compose token={this.state.token}/>\n  \t\t\t</>\n  \t\t\t)\n  \t\t// Pass in the token as props\n  \t}\n  \telse\n  \t\tnode = (<>\n  \t\t\t   <Login updateToken={this.updateToken} \n  \t\t\t    updateMessageList={this.updateMessageList} \n  \t\t\t    updateUserList={this.updateUserList}\n  \t\t\t    updateNumMessages={this.updateNumMessages}/>\n  \t\t\t   </>)\n  \t\t// Pass in the updateToken function as props\n  return(<> {node} </>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}